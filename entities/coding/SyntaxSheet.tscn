[gd_scene load_steps=2 format=2]

[ext_resource path="res://entities/coding/ScriptTextEdit.tscn" type="PackedScene" id=1]

[node name="Popup" type="Popup"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -762.0
margin_top = -343.5
margin_right = 762.0
margin_bottom = 343.5

[node name="TabContainer" type="TabContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -760.0
margin_top = -340.0
margin_right = 760.0
margin_bottom = 340.0

[node name="Objects" type="Tabs" parent="TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 58.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Objects"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Objects/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 568.0
text = "
# Get object reference

# You can copy this reference in the object menu (right-click object)
getObject(\"object_name\")

# Call object method

getObject(\"object_name\") .method()

# Sotre object reference in a variable

var my_object = getObject(\"object_name\")
my_object.method()"
readonly = true
scroll_vertical = 1.0
minimap_draw = false

[node name="Variables" type="Tabs" parent="TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 58.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Variables"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Variables/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 568.0
text = "
# Variables

var a # Data type is 'null' by default.
var b = 5
var c = 3.8
var d = b + c # Variables are always initialized in order.

# Type specification

var my_int: int # 'my_int' is of type 'int'.
var my_string: String = \"Hello\" # 'my_string' is of type 'String'.
var my_float := 3.14 # 'my_float' is of type 'float'.
var my_bool := true # 'my_bool' is of type 'bool'.

# Constantes

const A = 5
const C = 10 + 20 # Constant expression.
const E = [1, 2, 3, 4][0] # Constant expression: 1.
const F = sin(20) # 'sin()' can be used in constant expressions.
const G = x + 20 # Invalid; this is not a constant expression!
const H = A + 20 # Constant expression: 25 (`A` is a constant).

# Enums

enum {TILE_BRICK, TILE_FLOOR, TILE_SPIKE, TILE_TELEPORT}
# Is the same as:
const TILE_BRICK = 0
const TILE_FLOOR = 1
const TILE_SPIKE = 2
const TILE_TELEPORT = 3

enum State {STATE_IDLE, STATE_JUMP = 5, STATE_SHOOT}
# Is the same as:
const State = {STATE_IDLE = 0, STATE_JUMP = 5, STATE_SHOOT = 6}
# Access values with State.STATE_IDLE, etc."
readonly = true
minimap_draw = false

[node name="Funtions" type="Tabs" parent="TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 50.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Funtions"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Funtions/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 576.0
text = "
# Functions

func my_function(a, b):
    print(a)
    print(b)
    return a + b  # Return is optional; without it 'null' is returned.
	
func my_function(a: int, b: String):
    pass
	
# If a function argument has a default value, it's possible to infer the type

func my_function(int_arg := 42, String_arg := \"string\"):
    pass

# The return type of the function can be specified like this

func my_int_function() -> int:
    return 0
	
# Static functions

static func sum2(a, b):
    return a + b
	
# Functions override functions with the same name on the base/parent class.
# If you still want to call them, use '.' (like 'super' in other languages).

func something(p1, p2):
    .something(p1, p2)

# Constructor

func _init():
    print(\"Constructed!\")
    var lv = Something.new()
    print(lv.a)"
readonly = true
minimap_draw = false

[node name="Collections" type="Tabs" parent="TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 50.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Collections"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Collections/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 576.0
text = "
# Array

var arr = []
arr = [1, 2, 3]
var b = arr[1] # This is 2.
var c = arr[arr.size() - 1] # This is 3.
var d = arr[-1] # Same as the previous line, but shorter.
arr[0] = \"Hi!\" # Replacing value 1 with \"Hi!\".
arr.append(4) # Array is now [\"Hi!\", 2, 3, 4].

# Dictionary

var d = {4: 5, \"A key\": \"A value\", 28: [1, 2, 3]}
d[\"Hi!\"] = 0
d = {
    22: \"value\",
    \"some_key\": 2,
    \"other_key\": [2, 3, 4],
    \"more_key\": \"Hello\"
}
var d = {
    test22 = \"value\",
    some_key = 2,
    other_key = [2, 3, 4],
    more_key = \"Hello\"
}

var d = {} # Create an empty Dictionary.
d.waiting = 14 # Add String \"waiting\" as a key and assign the value 14 to it.
d[4] = \"hello\" # Add integer 4 as a key and assign the String \"hello\" as its value.
d[\"Godot\"] = 3.01 # Add String \"Godot\" as a key and assign the value 3.01 to it.

var test = 4
# Prints \"hello\" by indexing the dictionary with a dynamic key.
# This is not the same as `d.test`. The bracket syntax equivalent to
# `d.test` is `d[\"test\"]`.
print(d[test])"
readonly = true
minimap_draw = false

[node name="Conditions" type="Tabs" parent="TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 50.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Conditions"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Conditions/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 576.0
text = "
# if/elif/else

if [expression]:
    statement(s)
elif [expression]:
    statement(s)
else:
    statement(s)

if a < b:
        print(a)
    elif c >= 5:
        print(c)
    else:
        print(\"Fail!\")
if 1 + 1 == 2: return 2 + 2

var x = [value] if [expression] else [value]
y += 3 if y < 10 else -1

var count = 0
var fruit = (
        \"apple\" if count == 2
        else \"pear\" if count == 1
        else \"banana\" if count == 0
        else \"orange\"
)
print(fruit)  # banana

# Alternative syntax with backslashes instead of parentheses (for multi-line expressions).
# Less lines required, but harder to refactor.
var fruit_alt = \\
        \"apple\" if count == 2 \\
        else \"pear\" if count == 1 \\
        else \"banana\" if count == 0 \\
        else \"orange\"
print(fruit_alt)  # banana

# match (switch statement  in other languages)

match [expression]:
    [pattern](s):
        [block]
    [pattern](s):
        [block]
    [pattern](s):
        [block]

match x:
    1:
        print(\"We are number one!\")
    2:
        print(\"Two are better than one!\")
    \"test\":
        print(\"Oh snap! It's a string!\")

match typeof(x):
    TYPE_REAL:
        print(\"float\")
    TYPE_STRING:
        print(\"text\")
    TYPE_ARRAY:
        print(\"array\")

match x:
    1:
        print(\"It's one!\")
    2:
        print(\"It's one times two!\")
    _:
        print(\"It's not 1 or 2. I don't care to be honest.\")

match x:
    1:
        print(\"It's one!\")
    2:
        print(\"It's one times two!\")
    var new_var:
        print(\"It's not 1 or 2, it's \", new_var)
		
match x:
    []:
        print(\"Empty array\")
    [1, 3, \"test\", null]:
        print(\"Very specific array\")
    [var start, _, \"test\"]:
        print(\"First element is \", start, \", and the last is \\\"test\\\"\")
    [42, ..]:
        print(\"Open ended array\")

match x:
    {}:
        print(\"Empty dict\")
    {\"name\": \"Dennis\"}:
        print(\"The name is Dennis\")
    {\"name\": \"Dennis\", \"age\": var age}:
        print(\"Dennis is \", age, \" years old.\")
    {\"name\", \"age\"}:
        print(\"Has a name and an age, but it's not Dennis :(\")
    {\"key\": \"godotisawesome\", ..}:
        print(\"I only checked for one entry and ignored the rest\")

match x:
    1, 2, 3:
        print(\"It's 1 - 3\")
    \"Sword\", \"Splash potion\", \"Fist\":
        print(\"Yep, you've taken damage\")"
readonly = true
minimap_draw = false

[node name="Loops" type="Tabs" parent="TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 50.0
margin_right = -4.0
margin_bottom = -4.0

[node name="MarginContainer" type="MarginContainer" parent="TabContainer/Loops"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 50
custom_constants/margin_top = 50
custom_constants/margin_left = 50
custom_constants/margin_bottom = 50

[node name="ScriptTextEdit" parent="TabContainer/Loops/MarginContainer" instance=ExtResource( 1 )]
margin_left = 50.0
margin_top = 50.0
margin_right = 1462.0
margin_bottom = 576.0
text = "
# while

while [expression]:
    statement(s)
	
var a = 0
while a < 3:
	print(a)
	a += 1
# Prints 0, then 1, then 2
	
# Loops can be broken using \"break\" or continued using \"continue\"
var a = 0
while a < 10:
	if a == 2:
		continue
	if a == 4:
		break
	print(a)
	a += 1
# Prints 0, then 1, then 3

# for

for x in [5, 7, 11]:
    statement # Loop iterates 3 times with 'x' as 5, then 7 and finally 11.

var dict = {\"a\": 0, \"b\": 1, \"c\": 2}
for i in dict:
    print(dict[i]) # Prints 0, then 1, then 2.

for i in range(3):
    statement # Similar to [0, 1, 2] but does not allocate an array.

for i in range(1, 3):
    statement # Similar to [1, 2] but does not allocate an array.

for i in range(2, 8, 2):
    statement # Similar to [2, 4, 6] but does not allocate an array.

for c in \"Hello\":
    print(c) # Iterate through all characters in a String, print every letter on new line.

for i in 3:
    statement # Similar to range(3)

for i in 2.2:
    statement # Similar to range(ceil(2.2))"
readonly = true
minimap_draw = false
